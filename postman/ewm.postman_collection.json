{
	"info": {
		"_postman_id": "44b8d721-871b-4690-925c-26d63851f2fe",
		"name": "ewm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10809037"
	},
	"item": [
		{
			"name": "category",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "createCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse201StatusCodeAndJsonBody(pm);\r",
											"tester.testCategorySchema(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/admin/categories",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse200StatusCodeAndJsonBody(pm);\r",
											"tester.testCategorySchema(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"preparer.createCategory(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/admin/categories/:categoryId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "{{category_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse204StatusCode(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"preparer.createCategory(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/admin/categories/:categoryId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "{{category_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "public",
					"item": [
						{
							"name": "getCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse200StatusCodeAndJsonBody(pm);\r",
											"tester.testCategorySchema(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"await preparer.createCategory(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/categories/:categoryId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"categories",
										":categoryId"
									],
									"variable": [
										{
											"key": "categoryId",
											"value": "{{category_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "admin",
					"item": [
						{
							"name": "createUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse201StatusCodeAndJsonBody(pm);\r",
											"tester.testUserSchema(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomExampleEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/admin/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteUser",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"preparer.createUser(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"tester.testResponse204StatusCode(pm);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/admin/users/:userId",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"users",
										":userId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const baseUrl = pm.collectionVariables.get('base_url');\r",
					"\r",
					"preparer = {\r",
					"    createCategory: async function (pm) {\r",
					"        const category = await this.sendRequest(pm, 'POST', '/admin/categories', builder.getCategory(pm));\r",
					"        pm.collectionVariables.set('category_id', category.id);\r",
					"    },\r",
					"\r",
					"    createUser: async function (pm) {\r",
					"        const user = await this.sendRequest(pm, 'POST', '/admin/users', builder.getUser(pm));\r",
					"        pm.collectionVariables.set('user_id', user.id);\r",
					"    },\r",
					"\r",
					"    sendRequest: async function (pm, method, path, body) {\r",
					"        try {\r",
					"            const request = {\r",
					"                method: method,\r",
					"                url: baseUrl + path,\r",
					"                header: {\r",
					"                    'Content-Type': 'application/json'\r",
					"                },\r",
					"                body: {\r",
					"                    mode: 'raw',\r",
					"                    raw: JSON.stringify(body)\r",
					"                }\r",
					"            };\r",
					"\r",
					"            const responseJson = await new Promise((resolve, reject) => {\r",
					"                pm.sendRequest(request, (error, response) => {\r",
					"                    if (error) {\r",
					"                        const message = JSON.stringify(error);\r",
					"                        return reject(new Error(message));\r",
					"\r",
					"                    } else if (response.code >= 400 && response.code <= 599) {\r",
					"                        const message = JSON.stringify(response.json());\r",
					"                        return reject(new Error(message));\r",
					"\r",
					"                    } else {\r",
					"                        return resolve(response.json());\r",
					"                    }\r",
					"                })\r",
					"            });\r",
					"\r",
					"            return responseJson;\r",
					"\r",
					"        } catch (error) {\r",
					"            console.error(error.message);\r",
					"            throw new Error('Failed to create category');\r",
					"        }\r",
					"    },\r",
					"};\r",
					"\r",
					"builder = {\r",
					"    getCategory: (pm) => {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}')\r",
					"        }\r",
					"    },\r",
					"\r",
					"    getUser: (pm) => {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomExampleEmail}}'),\r",
					"        }\r",
					"    },\r",
					"};\r",
					"\r",
					"tester = {\r",
					"    testResponse200StatusCodeAndJsonBody: (pm) => {\r",
					"        pm.test('Response should have 200 status code and JSON body', () => {\r",
					"            pm.response.to.have.status(200);\r",
					"            pm.response.to.have.jsonBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    testResponse201StatusCodeAndJsonBody: (pm) => {\r",
					"        pm.test('Response should have 201 status code and JSON body', () => {\r",
					"            pm.response.to.have.status(201);\r",
					"            pm.response.to.have.jsonBody;\r",
					"        });\r",
					"    },\r",
					"\r",
					"    testResponse204StatusCode: (pm) => {\r",
					"        pm.test('Response should have 204 status code', () => {\r",
					"            pm.response.to.have.status(204);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    testCategorySchema: (pm) => {\r",
					"        pm.test(\"Response should have valid Category schema\", () => {\r",
					"            pm.response.to.have.jsonSchema(schemas.getCategory());\r",
					"        });\r",
					"    },\r",
					"\r",
					"    testUserSchema: (pm) => {\r",
					"        pm.test(\"Response should have valid User schema\", () => {\r",
					"            pm.response.to.have.jsonSchema(schemas.getUser());\r",
					"        });\r",
					"    },\r",
					"};\r",
					"\r",
					"schemas = {\r",
					"    getCategory: () => {\r",
					"        return {\r",
					"            \"type\": \"object\",\r",
					"            \"properties\": {\r",
					"                \"id\": { \"type\": \"integer\" },\r",
					"                \"name\": { \"type\": \"string\" },\r",
					"            },\r",
					"            \"required\": [\"id\", \"name\"]\r",
					"        }\r",
					"    },\r",
					"\r",
					"    getUser: () => {\r",
					"        return {\r",
					"            \"type\": \"object\",\r",
					"            \"properties\": {\r",
					"                \"id\": { \"type\": \"integer\" },\r",
					"                \"name\": { \"type\": \"string\" },\r",
					"                \"email\": { \"type\": \"string\" },\r",
					"            },\r",
					"            \"required\": [\"id\", \"name\", \"email\"]\r",
					"        }\r",
					"    },\r",
					"};\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "category_id",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		}
	]
}